//: # Курс "Swift-Drift" от [SnapBlog](http://snapblog.ru)
//:
//: ## Функции и Методы
//:
//: _Функция_ - это самостоятельные фрагменты кода, решающие определенную задачу. 
//:
//: Используйте `func` для объявления функции. Объявление функции может содержать от нуля и более _параметров_, написанные через `name: Type`, которые передают в функцию нужную информацию, для решения задачи, которую решает функция. По желанию, функция может иметь тип возвращаемого значения, написанного после `->`, которое указывает, что функция возвращает в качестве результата. Реализация функции идет внутри пары фигурных скобок (`{}`).
//:
func greet(name: String, day: String) -> String {
    return "Hello \(name), today is \(day)."
}

//: Вызов функции осуществляется со списком ее _параметров_ (если они есть) в скобках. Когда вы вызываете функцию, вы передаете первый аргумент без написания имени параметра (`name`), а каждый последующий параметр передается с его именем.
//:
greet("Anna", day: "Tuesday")
greet("Bob", day: "Friday")
greet("Charlie", day: "a nice day")

//: Функции, которые определены в пределах определенного типа (в том числе класса, структуры, перечисления) называются _методами_. Методы тесно связаны с типом, в котором они определены, и могут быть вызваны только этим же типом (или одним из его подкласса, о чем вы узнаете позже). В прошлом, узнав об операторе `switch`, вы вызывали метод, который определен в типе `String`, с названием `hasSuffix()`, показанный здесь снова:
//:
let exampleString = "hello"
if exampleString.hasSuffix("lo") {
    print("ends in lo")
}

//: Как вы видите, при вызове метода, используется точечный синтаксис (вызов метода через точку). Если вы вызываете метод, то передаете первый аргумент без написания имени параметра (`name`), а каждый последующий параметр передается с его именем. Например, этот метод типа `массив` имеет два параметра, и вы передаете имя только для второго параметра:
//:
var array = ["apple", "banana", "dragonfruit"]
array.insert("cherry", atIndex: 2)
array

//: [Назад](@previous) | [Далее](@next)
//:
//: [SnapBlog](http://snapblog.ru)