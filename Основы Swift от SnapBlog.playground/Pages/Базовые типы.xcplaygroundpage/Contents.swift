//: # Курс "Swift-Drift" от [SnapBlog](http://snapblog.ru)
//:
//: ## Базовые типы
//:
//: _Константой_ является значение, которое остается неизменным после его объявления, в то время как _переменной_ является значение, которое можно изменить. Если вы знаете, что значение не будет меняться в коде, объявите его как константу, а не переменную.
//:
//: Используйте `let` для создания константы и `var` для создания переменной.
//:
var myVariable = 42
myVariable = 50
let myConstant = 42

//: Каждая константа и переменная в Swift имеет тип, но вам не всегда нужно указывать тип явно. Присваивание значения при создании константы или переменной позволяет компилятору определить тип значения. В приведенном выше примере, компилятор делает вывод, что `myVariable` является целым числом, потому что его начальное значение является целым числом. Это называется _выводом типа_ (type inference). После того, как константе или переменной задали тип, этот тип нельзя будет изменить.
//:
//: Если начальное значение не дает достаточно информации (или, если нет начального значения), укажите тип, написав его после переменной, разделенных двоеточием.
//:
let implicitInteger = 70
let implicitDouble = 70.0
let explicitDouble: Double = 70

//: > **Эксперимент**:
//: > В Xcode, нажмите alt+левая_кнопка_мыши (Option-click) по имени переменной или константы, чтобы увидеть тип. Попробуйте на примерах, приведенных выше.
//:
//: Значения никогда не могут быть изменены неявно. Если вам нужно преобразовать значение в другой тип, создайте экземпляр нужного типа. Здесь вы преобразуете тип `Int` в `String`.
//:
let label = "The width is "
let width = 94
let widthLabel = label + String(width)

//: > **Эксперимент**:
//: > Попробуйте удалить преобразование в `String` из последней строки кода. Какую ошибку вы получите?
//:
//: Есть более простой способ добавления значения (например, какой-либо переменной) в строку: Напишите значение в скобках, и поставьте backslash (`\`) перед скобками. Это известно как _интерполяция строк_.
//:
let apples = 3
let oranges = 5
let appleSummary = "I have \(apples) apples."
let fruitSummary = "I have \(apples + oranges) pieces of fruit."

//: Используйте опциональные типы (optionals) для работы со значениями, которые могут вовсе отсутствовать. Опциональные типы либо содержат значение, либо содержат `nil` (нет значения, нет данных, пустота) чтобы указать, что значение отсутствует. Напишите знак вопроса (`?`) после типа, чтобы указать опциональный тип.
//:
let optionalInt: Int? = 9

//: Чтобы получить обычный тип (underlying type) из опционального (optional), вы должны _развернуть_ (_unwrap_) его. Вы будете изучать разворачивание опциональных типов (unwrapping optionals) позже, но самый простой способ сделать это - _force unwrap operator_ (`!`) (такой процесс называют _Forced Unwrapping_). Используйте оператор (!) только тогда, когда уверены, что значение не `nil`.
//:
let actualInt: Int = optionalInt!

//: Опциональные типы (optionals) широко распространены в Swift, и очень полезны во многих ситуациях, где значение может присутствовать или отсутствовать. Они особенно полезны в попытках преобразования типов.
//:
var myString = "7"
var possibleInt = Int(myString)
print(possibleInt)

//: В этом коде, значение `possibleInt` является `7`, потому что `myString` содержит значение целого числа. Но если вы поменяете `myString` на что-либо другое, что не является целым числом (не Int), то `possibleInt` становится `nil`.
//:
myString = "SnapBlog"
possibleInt = Int(myString)
print(possibleInt)

//: 
//:
//: Массив - это тип данных, который содержит какой-либо набор элементов. Для создания массива используются квадратные скобки (`[]`), и для того, чтобы обратиться к элементу массива - пишут его индекс в квадратных скобках. Любой массив начинается с индекса `0`.
//:
var ratingList = ["Poor", "Fine", "Good", "Excellent"]
ratingList[1] = "OK"
ratingList

//: Чтобы создать пустой массив, используйте синтаксис инициализации (initializer syntax). Вы узнаете о инициализаторах немного позже.
//:
// Создание пустого массива.
let emptyArray = [String]()

//: Наверное вы заметили, что код выше содержит комментарий. _Комментарий_ - это кусок текста в файле исходного кода, который не компилируется как часть программы, но обеспечивает какой-либо контекст или полезную информацию для отдельных частей кода. Однострочный комментарий появляется после двух косых черточек (`//`) и многострочный комментарий появляется между двумя косыми чертами и звездочками (`/*` … `*/`). Вы увидите оба типа комментариев в этом уроке.
//:
//: При _неявном разворачивании опционального типа_ (_implicitly unwrapped optional_), нам не нужно использовать разворачивание опционального значения (optional binding, forced unwrapping и т.д.). Для того, чтобы неявно развернуть опциональный тип нужно вместо (`?`) иcпользовать восклицательный знак (`!`).
//:
var implicitlyUnwrappedOptionalInt: Int!

//: Но этот вариант не всегда можно использовать. Нужно использовать этот способ тогда, когда мы знаем, что переменная(или константа) имеет значение nil только в начале работы программы.
//:
//: [Назад](@previous) | [Далее](@next)
//:
//: [SnapBlog](http://snapblog.ru)
